modules = [
        "UlibDefaults"
        "ulib.pprof"
        "UsmsfDefaults"
        "upolicy.Defaults"
        "ulib.TraceAll"
        "ulib.FileTrace"

        "scpcli.Defaults"
        "ulib.NetH2cClient"
     	"DisableAccessTokenRequestToNRF"
]

logrus {
	format = "text"
	config-file = "/app/config/usmsf_logger.conf"
	watch-config = true
}

smsf {
	my-fqdn = ${?USMSF_FQDN}
    my-nf-id = d1443c16-bf97-46c2-8633-d396161e911c
	mcc = "450"
	mnc = "05"
	my-map-id = "821099998888"
	my-diameter-name = "smsf"
	my-diameter-realm = "usmsf-svc.smsf.svc.cluster.local"
	my-secret-key = "5g-smsf-uangel"
}

nf-server {
    http {
        port = 8001
    }
    https {
        port = 8002
	max-handler = 0
	max-concurrent-streams = 8000
	max-readframesize = 10000000
	idle-timeout = 90
	maxuploadbuffer-per-connection = 700000000
	maxuploadbuffer-per-stram = 700000000
	verbose-logs = false
    }
    tls {
	cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt

        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
   }

   scheme {
	// scheme는 ulibclient에서 http/https/h2c를 구분하기 위한 용도로 사용
	sigtran = "http"
	diameter = "h2c"
   }
	useToken = false
}

sms-client {
    connection {
        timeout = 20
        keep-alive = 30
        expire-time = 60
    }
    tls {
    	pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
    	pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
    	peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
	//cert-file = ${?USMSF_HOME}/config/server.crt
        //key-file = ${?USMSF_HOME}/config/server.key
        //peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
    }
    session-count = 8
    MaxHeaderListSize = 10000000
    StrictMaxConcurrentStreams = false 
}

nrf-client {
     nrf.uri = "h2c://172.22.90.25:80"
}

nrfclient {
     nrf.uri = "h2c://172.22.90.25:80"
}


map-server {
    http {
        port = 8011
    }
    https {
        port = 8012
	max-handler = 0
	max-concurrent-streams = 6000
	max-readframesize = 10000000
	idle-timeout = 60
	maxuploadbuffer-per-connection = 70000000
	maxuploadbuffer-per-stram = 70000000
    }
    tls {
	cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt

        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
   }
}


redis {
    server.uri = "localhost:6379"
    connection-time-out = 3000 #3seconds
    write-time-out = 3000 #3seconds
    read-time-out = 5000 #5seconds, it should be longer than ping-period
    sender-queue-size = 300
    ping-period = 3000 #3seconds
    # interning-expired-period = 1000 #a second
    interning-expired-period = 3600000 #an hour
    reconnect-try-period = 3000 #3seconds
    cache-expiration = 10000 #10seconds
    subs-expiration = 60m #60 minutes
}

mariaDB {
	server.uri = "umariadb.smsf.svc.cluster.local:3306"
	driver = "mysql"
	dbname = "smsf"
	user = "root"
	pwd = "root.123"
        SetMaxIdleConns = 50
        SetMaxOpenConns = 50
	SetConnMaxLifetime = 0
}

scpcli {
    nf-instance-id : d1443c16-bf97-46c2-8633-d396161e911c
    nf-type : SMSF
    re-discover-interval : 10s

    nf-circuit-breaker {
            break-threshold = 3
            recovery-time = 3s
    }

}

policy-based-selector {
        // nf type 입니다.
    nftype-dyn-UDM {
        // NRF Discovery 결과에 적용할 dataframe pipeline 입니다.
         dataframe-pipelines : [            
            // 살아 남은 NF를   정렬합니다.  routingIndicator에 의해 필터된것을 우선으로 하고,  그 다음으로는 priority 를 봅니다.
            {
                action : sort
                orders : [
                    {
                        column : priority ,
                        order : asc
                    }
                ]
            } ,
         ]
    }
    nftype-dyn-UDM-Params {
       dataframe-pipelines : [
         {
            action : new-value
            new-value : {
              "hello" : 10
            }
            change-value : {
                supi : """fn.replaceLastNChars(record.supi , 5 , "0")"""
            }
          }
       ]
    }
}

cert-store {
    pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
    pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
    peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
}

statistic {
    stattimer {
	timer = 10 	
    }
	
    registry = "default"
    items {
        call : TransactionTimer
        db : TransactionTimer
        n32i_http : TransactionTimer
        controller_get_context_info : TransactionTimer
        controller_exchange_capa : TransactionTimer
        controller_exchange_cipher_suite : TransactionTimer
        controller_exchange_protection_policy : TransactionTimer
        controller_terminte : TransactionTimer
        controller_error_report : TransactionTimer
        controller_error_report_self : TransactionTimer
        controller_child_actor : Gauge
    }
}

trace {
    http {
        onoff = true
        port = 8100
        connection {
                timeout = 20
                keep-alive = 20
                expire-time = 20
        }
    }

    default-service-name = "USMSF"
    config-path =  ${?USMSF_HOME}/resources/jaegertrace

    trace-home = "/tmp/traces"
    #trace-home = "./traces"

    trace-log-pattern= """
             {{- if .Logs.request -}}
                 >>>>> {{.ID}} 
     URL : {{index .Tags "http.url"}}
     Header : {{.Logs.header}}
     REQUEST : {{.Logs.request}}
             {{- end -}}
             {{- if index .Logs "http.status_code" -}}
                 <<<<< {{.ID}} 
     URL : {{index .Tags "http.url"}}
     StatusCode : {{index .Logs "http.status_code"}}
     Header : {{.Logs.header}}
     Response : {{.Logs.response}}
             {{- end -}}
    {{print "\n\n"}}"""
}



http-configmgr {
    http {
        port = 8090
    }

    scheme = "http"
    use = "svc"
}

metric {
    default {
        reporters = [
            {
                class : "logger",
                logger : metric,
                interval : 10s
            }
        ]
    }
}
