apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configmap.name }}
  namespace: {{ .Release.Namespace }}
binaryData:
  server.p12: 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
  smsf.uangel.com.p12: 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
data:
  {{- $dirpath := printf "configfiles/*.{json,yaml}" }}
  {{- range $path, $_ := .Files.Glob $dirpath }}
  {{ base $path }}: |-
  {{ $.Files.Get $path | nindent 4 }}
  {{- end }}

  rootca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDpjCCAo4CCQDJAMHwEds/JjANBgkqhkiG9w0BAQUFADCBlDELMAkGA1UEBhMC
    S08xDjAMBgNVBAgMBVNlb3VsMRAwDgYDVQQHDAdHYW5nTmFtMRgwFgYDVQQKDA9F
    eGFtcGxlUHVibGljQ0ExEjAQBgNVBAsMCUV4YW1wbGVDQTETMBEGA1UEAwwKcm9v
    dGNhLmNvbTEgMB4GCSqGSIb3DQEJARYRaXR0ZWNoQHJvb3RjYS5jb20wHhcNMTkw
    ODA2MDc1MDE1WhcNMjAwODA1MDc1MDE1WjCBlDELMAkGA1UEBhMCS08xDjAMBgNV
    BAgMBVNlb3VsMRAwDgYDVQQHDAdHYW5nTmFtMRgwFgYDVQQKDA9FeGFtcGxlUHVi
    bGljQ0ExEjAQBgNVBAsMCUV4YW1wbGVDQTETMBEGA1UEAwwKcm9vdGNhLmNvbTEg
    MB4GCSqGSIb3DQEJARYRaXR0ZWNoQHJvb3RjYS5jb20wggEiMA0GCSqGSIb3DQEB
    AQUAA4IBDwAwggEKAoIBAQCrY5TNXierpwTIq4s9Xw6QH3/RVal0vaM/jMohV8O9
    PySR5PcHvnSpPv+DqNaa9e6l7INTZlj6eL+A7kTGJ69A98BKOiGpN/COL4obCLCS
    os2Xv4Y9WJiH/nf0F1wHjO4tlvOfc604YiVhmUDkab2/HbU36A6f2n++TfHvc6aN
    9j2mljPazkyzIFm5DwAnwon4Q4bLe7BNCxWZTjz16E/RvsxqmSyqfIkYhffwtFJG
    YUBiL/bNMVFeIJoOBCHcZ0UO5+5LpNXFN3Uaf1DfgGsjMl8CEvr7jlQH0jDB2DN9
    o7PAO1mAgFXytveOhvkSlZebUYEedjEz1sSJ5sGAe/XTAgMBAAEwDQYJKoZIhvcN
    AQEFBQADggEBAGTH2iB5xeONdF3iruTjIvdrDXRcDWe8UqlyG0sZjxlYLcDdo5tI
    FcHS0S3FWSgq1ljm+lwbfUC1g/R2OuP7WImaE+2kKyuSOuUEtGSZrxkRcOd0y9kT
    a6oyZStu1s1JjYu+7LKCsMFbe5KPL0owG2JkTC9SAmowT68F8IwTcO4rmX9SzLYI
    CSjrtLndPsdcBZsjleTIqprK1Odznh0yYfwEDwMXLpZ/P3kmkSmMYOkgo9Dq0j+g
    VCyZgrT54l6zOpyydt4SLczVjfx+MJ5hSSMuKZ6/SUaIosD4+cjQhyppXP0+259r
    JprQvIYj8JLRy1hampPV579B2ZvLhtF0u1I=
    -----END CERTIFICATE-----

  server.cnf: |-
    # OpenSSL configuration file for creating a CSR for a server certificate
    # Adapt at least the FQDN and ORGNAME lines, and then run 
    # openssl req -new -config server.cnf -keyout server.key -out server.csr
    # on the command line.
    
    FQDN = smsf.uangel.com
    ORGNAME = UANGEL
    ORGUNIT = CoreTEch
    ALTNAMES = DNS:$FQDN   # , DNS:bar.sepp.uangel.com , DNS:www.sepp.uangel.com
    
    # --- no modifications required below ---
    [ req ]
    #default_bits = 2048
    #default_md = rsa
    prompt = no
    encrypt_key = no
    distinguished_name = dn
    req_extensions = req_ext
    
    [ dn ]
    C  = KO
    ST = KyeongKi
    L  = SeongNam
    O  = $ORGNAME 
    OU = $ORGUNIT 
    CN = $FQDN
    emailAddress = coretech@uangel.com
     
    [ req_ext ]
    subjectAltName = $ALTNAMES

  server.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDpzCCAo8CCQDhi/ThQaV2zTANBgkqhkiG9w0BAQUFADCBlDELMAkGA1UEBhMC
    S08xDjAMBgNVBAgMBVNlb3VsMRAwDgYDVQQHDAdHYW5nTmFtMRgwFgYDVQQKDA9F
    eGFtcGxlUHVibGljQ0ExEjAQBgNVBAsMCUV4YW1wbGVDQTETMBEGA1UEAwwKcm9v
    dGNhLmNvbTEgMB4GCSqGSIb3DQEJARYRaXR0ZWNoQHJvb3RjYS5jb20wHhcNMTkw
    ODA2MDc1MDIwWhcNMjkwODAzMDc1MDIwWjCBlTELMAkGA1UEBhMCS08xETAPBgNV
    BAgMCEt5ZW9uZ0tpMREwDwYDVQQHDAhTZW9uZ05hbTEPMA0GA1UECgwGVUFOR0VM
    MREwDwYDVQQLDAhDb3JlVEVjaDEYMBYGA1UEAwwPc21zZi51YW5nZWwuY29tMSIw
    IAYJKoZIhvcNAQkBFhNjb3JldGVjaEB1YW5nZWwuY29tMIIBIjANBgkqhkiG9w0B
    AQEFAAOCAQ8AMIIBCgKCAQEAwEHVmU9ay5RYmTFeK5gZov3oClgR8VcrqEuTAPoo
    fo0zkG3mVwUCNuS+/2V/aOCNCFCIMo3wrObnvwBJwyJ87ITgQRN+g8iqZObjlIHM
    mYQ6ekRb8GjEJJ0aUDDQnsJiu/w1CeQFl98IDbLLQMqpMHmBQ0KVXwrDBmGxRHNs
    z9IAewWaraKQ1tX4fQalooydkSfqgiF8NNjY97lPO+jZ6EOnvM112lBrWvFvR8RD
    VHaQBjM+bITVkLftqREAO4HAVnAQ97s5Avrd5MjC1OtKAq1txfFYz6Zkpg60xbjO
    y4QqzrqHjAVDkqVF7OmbMPNo0pynb1QljAjVYyDMP3Gk3QIDAQABMA0GCSqGSIb3
    DQEBBQUAA4IBAQCAZrYNqP5Th6QRdmSLM9fEq7JO/a9AGGcn/FQPeOiGovTOwoyR
    t72Ep+SO4IHjVcPPD/6HPRBWnbNmzq/zqQ2gI5qpX28fWVo7BfOyfSbkkBtmnPVF
    Hi2+Bg2f+gnJh1B5g0OK24W7ApUG1vW9aDOPjwB/LDzSN5qRxCKJXTT0pK4f5pG/
    JD1gRggpgbqsM4EJ7lvwzE8PNikUsDKjro+gSFHQ0F0FrQE/Q8xxcIWFOVx0ABl8
    B/bclRH64PBFto6CHM1nQVuUEbWiY8gaf8OYbFIP3JPwAdxpg93Tttj5AYdxgsf4
    lpCyi4EBHC0Wn/oo2lMTPghC11Lkzs6gsSuq
    -----END CERTIFICATE-----

  server.csr: |
    -----BEGIN CERTIFICATE REQUEST-----
    MIIDCDCCAfACAQAwgZUxCzAJBgNVBAYTAktPMREwDwYDVQQIDAhLeWVvbmdLaTER
    MA8GA1UEBwwIU2VvbmdOYW0xDzANBgNVBAoMBlVBTkdFTDERMA8GA1UECwwIQ29y
    ZVRFY2gxGDAWBgNVBAMMD3Ntc2YudWFuZ2VsLmNvbTEiMCAGCSqGSIb3DQEJARYT
    Y29yZXRlY2hAdWFuZ2VsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
    ggEBAMBB1ZlPWsuUWJkxXiuYGaL96ApYEfFXK6hLkwD6KH6NM5Bt5lcFAjbkvv9l
    f2jgjQhQiDKN8Kzm578AScMifOyE4EETfoPIqmTm45SBzJmEOnpEW/BoxCSdGlAw
    0J7CYrv8NQnkBZffCA2yy0DKqTB5gUNClV8KwwZhsURzbM/SAHsFmq2ikNbV+H0G
    paKMnZEn6oIhfDTY2Pe5Tzvo2ehDp7zNddpQa1rxb0fEQ1R2kAYzPmyE1ZC37akR
    ADuBwFZwEPe7OQL63eTIwtTrSgKtbcXxWM+mZKYOtMW4zsuEKs66h4wFQ5KlRezp
    mzDzaNKcp29UJYwI1WMgzD9xpN0CAwEAAaAtMCsGCSqGSIb3DQEJDjEeMBwwGgYD
    VR0RBBMwEYIPc21zZi51YW5nZWwuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCRqeJT
    RoHXh38v35nHfSjWtfb68nmdRzhkcFnXHkmoHXA3L2SzKB0A+vKpruuv0bwaug/h
    JxCyA+HIGGYbxVQo3bP407CMI+AU4d4XzF4o/X6s1cgfzA/LN6fd6DscZZVpLD/F
    jG6j24XRDo6tHjcmfpvMQX8P+D+Dk0ukyUP4A2nDMIFyKKqGzDcziSYi1GeqmqMU
    nPl/oPMpJuUsdIaHnnBYWvvvBYrQU3cNpki+bDO4utRPMyyvzwdm9RrU/2A3xo7P
    IgKP3RsO3UqGqXRfu49qw6l9xNBGA9hyuFCBe3RRocOlWTcIJciR2iE/Tz113gRW
    EiLSWERwK65RJ3fw
    -----END CERTIFICATE REQUEST-----

  server.key: |
    -----BEGIN PRIVATE KEY-----
    MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDAQdWZT1rLlFiZ
    MV4rmBmi/egKWBHxVyuoS5MA+ih+jTOQbeZXBQI25L7/ZX9o4I0IUIgyjfCs5ue/
    AEnDInzshOBBE36DyKpk5uOUgcyZhDp6RFvwaMQknRpQMNCewmK7/DUJ5AWX3wgN
    sstAyqkweYFDQpVfCsMGYbFEc2zP0gB7BZqtopDW1fh9BqWijJ2RJ+qCIXw02Nj3
    uU876NnoQ6e8zXXaUGta8W9HxENUdpAGMz5shNWQt+2pEQA7gcBWcBD3uzkC+t3k
    yMLU60oCrW3F8VjPpmSmDrTFuM7LhCrOuoeMBUOSpUXs6Zsw82jSnKdvVCWMCNVj
    IMw/caTdAgMBAAECggEBAITpPnyVYqSY8sM9YOfsZ9TJibAVAJqC8/iN/pvPVU1f
    2oT/pR0FpmlCrFQt2+4qRvW3juC8ReWSYCYoUdYoMorktY/npS//+uR0xmJ1dXev
    9Slvtsu18duKDJXhmWgX5GAnVJd43vEGTDAEKgWp1VtgtJ9GGbOx4e+4e+9hiJkG
    V0civiWbyPda8hzDHhkCR94ZO0KkSgMA7/6AeW0RVMGGPgM9/lVohsHfv5bsZIVJ
    lTIQPSoqE/WMbHpsn+YsXiQHEqDr67ZpDGcn7rdkHXk8xMyyqovVmC/VNLAjCuyc
    /TD5EkPpKkWFRopD6TDV72La4tyq6C9RMcvfIJIdE9UCgYEA5alN5tGBL681JbRV
    FurLXdkv0RVkWL/rhsnF/+BbQ2sr0HcwNARsj8+KBAcbDUD5TTH3BeA4lfwJVE6V
    SfoiijjD10xGLRDHVBmjyZ1SKxGveoR9MUcD9mmxzNxgukklTj58158jkTOCnTXL
    eRjMwkI/OpzTxPrDnxYYggL45gMCgYEA1k5eoQZ65nfYuxlw+ZIX3RngsBvYbn3a
    2CtQkbwaEU+YulEc2ZQr92A4oarO8oW/+kCeHJxIAolfn8MFBlJjpSd4IBuOj12S
    CR3+VOAMCz4HAevcF1B97eWtxrsTL2azieeiIFbFsVEYyw+IHTJpvdVNn2gZ6LvX
    8fcej6Y4Q58CgYAkEsHPvZyjFswsTfUHkn27EgA2wTtvzUV7eHoHRQBQyKarKe2C
    XieHNzwggdU38bq262A3pg59UIdOnMFKS2XdfCkWyj5Dmd0VUqmtY26ioTaE8gaQ
    FO2EaPmqifsPh6m6bopBfBekGQktFGQPc1vGL42q8TM6P4E2ncvfsAPUbQKBgQDH
    fWBdKLkS/JEFaaNezn3kVYhwpxsLj6A+BeQUJTNm1d9n4MWoTGO4/Rr6cxP9cj/I
    5onIPDpUEiivgUyWG++h92G9EandDs84KXFs9LqBZJYFVdck5Mq0v07KZa5wO3v5
    bWPgEqYob0NTEvwzoZAJJBwDvVYQ7XsRRGZwddx+JQKBgQCdVW7OchmPHMFnJhsu
    tON6K2k5Wi+MplzXwfWcodYUwT/tO8vzZm0bAFuSbRwjyGSNCRLcinDDLBHlSTFD
    HssBU9yZg7V54rZdWhF6aRf287BK6ow1DPxUPPfkhJlUAVNKPPoaF6CoD/bcqOo3
    d1uQLhyNzHkRSfbKw+YpN59iEg==
    -----END PRIVATE KEY-----

  server.p12.key: |
    usepp

  smsf.uangel.com.p12.key: |
    usmsf

  usmsf.conf: |-
    modules = [
        "UlibDefaults"
        "ulib.pprof"
        "UsmsfDefaults"
        "upolicy.Defaults"
        "ulib.TraceAll"
        "ulib.FileTrace"

        "scpcli.Defaults"
        {{- if eq .Values.configmap.usmsfConf.useLocalNFProfile true }}
        "scpcli.NRFLocalConfig"
        {{- end }}
        {{- if eq .Values.configmap.usmsfConf.oauthTokenScheme "not_use" }}
        "scpcli.DisableOAuth"
        {{- else if eq .Values.configmap.usmsfConf.oauthTokenScheme "use_local_token" }}
        "scpcli.TokenLocalConfig"
        {{- end }}

        "ulib.NetH2cClient"
        "UccmsClientModule"
    ]
    
    logrus {
        format = "text"
        config-file = ${USMSF_HOME}/config/usmsf_logger.conf
        watch-config = true
    }
    
    smsf {
        my-fqdn = ${?USMSF_FQDN}
        my-nf-id = {{ .Values.global.smsf.nfId }}
        mcc = {{ .Values.global.smsf.mcc | quote }}
        mnc =  {{ .Values.global.smsf.mnc | quote }}
        my-map-id = "821099998888"
        my-diameter-name = "smsf"
        my-diameter-realm = "{{ .Values.global.serviceName.svc }}.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}"
        my-secret-key = "5g-smsf-uangel"

        access-token-checker {
            # true인 경우, HTTP 메시지 내 access token의 유효성을 검사한다. (default: false)
            token-check = {{ .Values.configmap.usmsfConf.shouldCheckAccessToken }}
          
            # HMAC, RSA, RSAPSS, ECDSA 중 하나
            signing-method = RSA
          
            key-file = ${?USMSF_HOME}/config/access_token_checker/verification_key.pem

            expected-claims {
                scope = "nsmsf-sms"
            }
        }
    }
    
    nf-server {
        http {
            port = {{ .Values.global.smsf.serverPort.forNFServer.http }}
        }
        https {
            port = {{ .Values.global.smsf.serverPort.forNFServer.https }}
            max-handler = 0
            max-concurrent-streams = 8000
            max-readframesize = 10000000
            idle-timeout = {{ .Values.configmap.usmsfConf.nfServer.https.idleTimeout }}
            maxuploadbuffer-per-connection = 700000000
            maxuploadbuffer-per-stram = 700000000
            verbose-logs = false
        }
        tls {
            cert-file = ${?USMSF_HOME}/config/server.crt
            key-file = ${?USMSF_HOME}/config/server.key
            peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
    
            pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
            pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
       }
    
       scheme {
           // scheme는 ulibclient에서 http/https/h2c를 구분하기 위한 용도로 사용
           sigtran = {{ .Values.configmap.usmsfConf.nfServer.scheme.sigtran | quote }}
           diameter = {{ .Values.configmap.usmsfConf.nfServer.scheme.diameter | quote }}
       }
    }
    
    sms-client {
        connection {
            timeout = 20
            keep-alive = 30
            expire-time = 60
        }
        tls {
            pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
            pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
            peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
        }
        session-count = 8
        MaxHeaderListSize = 10000000
        StrictMaxConcurrentStreams = false 
    }

    nrf-local-config : {
      "045fcaf2-9969-4247-bf19-0c47716a71a9" : {
        fqdn : "usmsf-udm-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:8091"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : nudm-sdm
            versions : [{
                apiVersionInUri : v1
              },{
                apiVersionInUri : v2
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : nudm-uecm
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : UDM
        udmInfo : {
          groupId : g1
          supiRanges : [{
              end : 460000000000000
              start : 450000000000000
            }]
        }
      } ,
      "045fcaf2-9969-4247-bf19-0c47716a71b9" : {
        fqdn : "usmsf-udm-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:8081"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : nudm-sdm
            versions : [{
                apiVersionInUri : v1
              },{
                apiVersionInUri : v2
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : nudm-uecm
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : UDM
        udmInfo : {
          groupId : g1
          supiRanges : [{
              end : 480000000000000
              start : 470000000000000
            }]
        }
      },
      "045fcaf2-9969-4247-bf19-1c47716a71b9" : {
        fqdn : "usmsf-udm-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:8081"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : nudm-sdm
            versions : [{
                apiVersionInUri : v1
              },{
                apiVersionInUri : v2
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : nudm-uecm
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : UDM
        udmInfo : {
          groupId : g1
          supiRanges : [{
              end : 500000000000000
              start : 490000000000000
            }]
        }
      } ,
      "045fcaf2-9969-4247-bf19-1c47716a71ba" : {
        fqdn : "usmsf-udm-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:9091"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : https
            serviceName : nudm-sdm
            versions : [{
                apiVersionInUri : v1
              },{
                apiVersionInUri : v2
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : https
            serviceName : nudm-uecm
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : UDM
        udmInfo : {
          groupId : g1
          supiRanges : [{
              end : 440000000000000
              start : 400000000000000
            }]
        }
      } ,
      "045fcaf2-9969-4247-bf19-1c47716a71cc" : {
        fqdn : "usmsf-udm-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:9091"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : https
            serviceName : nudm-sdm
            versions : [{
                apiVersionInUri : v1
              },{
                apiVersionInUri : v2
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : https
            serviceName : nudm-uecm
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : UDM
        udmInfo : {
          groupId : g1
          supiRanges : [{
              end : 600000000000000
              start : 500000000000000
            }]
        }
      } ,
    
      "1234-b32311-737c123-1876abcd7" : {
        fqdn : "usmsf-amf-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:9095"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : https
            serviceName : namf-comm
            versions : [{
                apiVersionInUri : v1
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : https
            serviceName : namf-mt
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : AMF
      },
      "1234-b32311-737c123-1876abcb7" : {
        fqdn : "usmsf-amf-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:8085"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : namf-comm
            versions : [{
                apiVersionInUri : v1
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : namf-mt
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : AMF
      },
      "1234-b32311-737c123-2876abcb7" : {
        fqdn : "usmsf-amf-sim.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:8085"
    
        token : "access_token_base64_encoded_string" 
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : namf-comm
            versions : [{
                apiVersionInUri : v1
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : namf-mt
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : AMF
      }
    }
    
    nrf-client {
        nrf.uri = {{ .Values.configmap.usmsfConf.nrfClientForRegister.uri | quote }}
    }

    nrfclient {
        nrf.uri = {{ .Values.configmap.usmsfConf.nrfClientForDiscovery.uri | quote }}
    }
    
    map-server {
        http {
            port = {{ .Values.global.smsf.serverPort.forInternal.http }}
        }
        https {
            port = {{ .Values.global.smsf.serverPort.forInternal.https }}
            max-handler = 0
            max-concurrent-streams = 6000
            max-readframesize = 10000000
            idle-timeout = 60
            maxuploadbuffer-per-connection = 70000000
            maxuploadbuffer-per-stram = 70000000
        }
        tls {
            cert-file = ${?USMSF_HOME}/config/server.crt
            key-file = ${?USMSF_HOME}/config/server.key
            peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
    
            pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
            pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
       }
       FailureNotiAddr = ${?USMSF_FAILNOTI_ADDR}
    }
    
    redis {
        server.uri = {{ .Values.configmap.usmsfConf.redis.serverURI | quote }}
        connection-time-out = 3000 #3seconds
        write-time-out = 3000 #3seconds
        read-time-out = 5000 #5seconds, it should be longer than ping-period
        sender-queue-size = 300
        ping-period = 3000 #3seconds
        # interning-expired-period = 1000 #a second
        interning-expired-period = 3600000 #an hour
        reconnect-try-period = 3000 #3seconds
        cache-expiration = 10000 #10seconds
        subs-expiration = 60m #60 minutes
    }
    
    mariaDB {
        server.uri = "{{ .Values.global.serviceName.mariadb }}.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}:{{ .Values.configmap.usmsfConf.mariaDB.serverURI.port }}"
        driver = "mysql"
        dbname = {{ .Values.configmap.usmsfConf.mariaDB.dbname | quote }}
        user = {{ .Values.configmap.usmsfConf.mariaDB.user | quote }}
        pwd = {{ .Values.configmap.usmsfConf.mariaDB.pwd | quote }}
        SetMaxIdleConns = 50
        SetMaxOpenConns = 50
        SetConnMaxLifetime = 0
    }
    
    scpcli {
        nf-instance-id : {{ .Values.global.smsf.nfId }}
        nf-type : {{ .Values.global.nfType }}
        re-discover-interval : 10s
        nf-circuit-breaker {
          break-threshold = 3
          recovery-time = 3s
        }
    }
    
    policy-based-selector {
        // nf type 입니다.
        nftype-dyn-UDM {
            // NRF Discovery 결과에 적용할 dataframe pipeline 입니다.
             dataframe-pipelines : [
                // 살아 남은 NF를   정렬합니다.  routingIndicator에 의해 필터된것을 우선으로 하고,  그 다음으로는 priority 를 봅니다.
                {
                    action : sort
                    orders : [
                        {
                            column : priority ,
                            order : asc
                        }
                    ]
                } ,
             ]
        }
        nftype-dyn-UDM-Params {
           dataframe-pipelines : [
             {
                action : new-value
                new-value : {
                  "hello" : 10
                }
                change-value : {
                    supi : """fn.replaceLastNChars(record.supi , 5 , "0")"""
                }
              }
           ]
        }
    }
    
    cert-store {
        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
    }
    
    statistic {
        stattimer {
            timer = 10
        }

        registry = "default"
        items {
            call : TransactionTimer
            db : TransactionTimer
            n32i_http : TransactionTimer
            controller_get_context_info : TransactionTimer
            controller_exchange_capa : TransactionTimer
            controller_exchange_cipher_suite : TransactionTimer
            controller_exchange_protection_policy : TransactionTimer
            controller_terminte : TransactionTimer
            controller_error_report : TransactionTimer
            controller_error_report_self : TransactionTimer
            controller_child_actor : Gauge
        }
    }
    
    trace {
        http {
            onoff = {{ .Values.configmap.usmsfConf.trace.onoff }}
            port = {{ .Values.global.smsf.serverPort.forTrace.http }}
            connection {
                timeout = 20
                keep-alive = 20
                expire-time = 20
            }
        }
    
        default-service-name = "USMSF"
        config-path = ${?USMSF_HOME}/config/jaegertrace
    
        trace-home = "/tmp/traces"
        
        trace-log-pattern= """
                 {{ "{{" }}- if .Logs.request -{{ "}}" }}
                     >>>>> {{ "{{" }}.ID{{ "}}" }}
         URL : {{ "{{" }} index .Tags "http.url"{{ "}}" }}
         Header : {{ "{{" }} .Logs.header{{ "}}" }}
         REQUEST : {{ "{{" }} .Logs.request{{ "}}" }}
                 {{ "{{" }}- end -{{ "}}" }}
                 {{ "{{" }}- if index .Logs "http.status_code" -{{ "}}" }}
                     <<<<< {{ "{{" }}.ID{{ "}}" }}
         URL : {{ "{{" }}index .Tags "http.url"{{ "}}" }}
         StatusCode : {{ "{{" }}index .Logs "http.status_code"{{ "}}" }}
         Header : {{ "{{" }}.Logs.header{{ "}}" }}
         Response : {{ "{{" }}.Logs.response{{ "}}" }}
                 {{ "{{" }}- end -{{ "}}" }}
        {{ "{{" }}print "\n\n"{{ "}}" }}"""
    }
    
    http-configmgr {
        http {
            port = {{ .Values.global.smsf.serverPort.forConfigMgr.http }}
        }
    
        scheme = "http"
        use = "svc"

        decisionPath = ${?USMSF_HOME}/config/rselec_meta.json
        smsfPath = ${?USMSF_HOME}/config/smsf_meta.json
        smscPath = ${?USMSF_HOME}/config/smsc_meta.json

        udecisionPath = ${?USMSF_HOME}/config/rselec_config.json
        usmsfPath = ${?USMSF_HOME}/config/smsf_config.json
        usmscPath = ${?USMSF_HOME}/config/smsc_config.json
    }
    
    metric {
        default {
            reporters = [
                {
                    class : "logger",
                    logger : metric,
                    interval : 10s
                }
            ]
        }
    }

  usmsf_logger.conf: |
    loggers {
        root {
            level = {{ .Values.configmap.usmsfConf.logger.logLevels.root | quote }}
            appender = [
                console
            ]
        }

        com.uangel {
            level = {{ .Values.configmap.usmsfConf.logger.logLevels.com_uangel | quote }}
            additivity = true
            appender = [
                uangel
            ]
        }

        call.log {
            level = "INFO"
            additivity = true
            appender = [
                calllog
            ]
        }

        metric {
            additivity =  false
            appender = [
                metric
            ]
        }

        samsung {
            fault {
                appender = [ samsung_alarm, samsung_console ]
            }
            selfdiag {
                appender = [ samsung_diag, samsung_console ]
            }
            reset {
                appender = [ samsung_diag, samsung_console ]
            }
            init {
                appender = [ samsung_diag, samsung_console ]
            }
            config {
                appender = [ samsung_diag, samsung_console ]
            }
            error {
                appender = [ samsung_app, samsung_console ]
            }
            event {
                appender = [ samsung_app, samsung_console ]
            }
            info {
                appender = [ samsung_app, samsung_console ]
            }
        }
    }

    appenders {
        console {
            format = "text"
            class = "Console"
            print-caller = true
        }
        samsung_console {
            format = "samsung"
            class = "Console"
            print-caller = true
        }
        uangel {
            format = "text"
            class = "File"
            file = ${?USMSF_HOME}/logs/usmsf.log
        }
        calllog {
            format = "text"
            class = "File"
            file = ${?USMSF_HOME}/logs/call.log
        }
        metric {
            format = "text"
            class = "File"
            file = ${?USMSF_HOME}/logs/metric.log
        }
        samsung_alarm {
            format = "samsung"
            class = "RollingFile"
            file-name-pattern = ${?USMSF_HOME}/logs/alarm.log.%Y%m%d
        }
        samsung_diag {
            format = "samsung"
            class = "RollingFile"
            file-name-pattern = ${?USMSF_HOME}/logs/diag.log.%Y%m%d
        }
        samsung_app {
            format = "samsung"
            class = "RollingFile"
            file-name-pattern = ${?USMSF_HOME}/logs/app.log.%Y%m%d
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.secret.name.accessTokenChecker }}
  namespace: {{ .Release.Namespace }}
data:
  verification_key.pem: |-
  {{- $.Files.Get "secret_files/access_token_checker/verification_key.pem" | nindent 4 }}

