modules = [

	"HealthCheckerModule"
        "UlibDefaults"
	"TraceMgr"
	"ConfigMgrModule"
	"UccmsClientModule"
 #       "ulib.pprof"
#        "UsmsfDefaults"
  
      "upolicy.Defaults"
 #       "ulib.TraceAll"
  
#      "ulib.FileTrace"

 #       "scpcli.Defaults"
    
#    "ulib.NetH2cClient"
   #     "scpcli.NRFLocalConfig"
 #      "scpcli.TokenLocalConfig"
  #     "UccmsClientModule"

],

logrus {
        format = "text"
        config-file = /home/smsf/go/src/uangel.com/usmsf/cmd/usmsf/logger.conf
        watch-config = true
}

smsf {
        my-fqdn = ${?USMSF_FQDN}
        my-nf-id = d1443c16-bf97-46c2-8633-d396161e911c
        mnc = "450"
        mcc = "06"
        my-map-id = "821099998888"
        my-diameter-name = "smsf"
        my-diameter-realm = "usmsf-svc.smsf.svc.cluster.local"
        my-secret-key = "5g-smsf-uangel"
        smsf-noti-url = ${?USMSF_FAILNOTI} // http://127.0.0.1:8001
}

nf-server {
    http {
        port = 8001
    }
    https {
        port = 8002
        max-handler = 0
        max-concurrent-streams = 8000

     max-readframesize = 10000000
        idle-timeout = 90
        maxuploadbuffer-per-connection = 700000000
        maxuploadbuffer-per-stram = 700000000
        verbose-logs = false
    }
    tls {
        cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt

        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
   }

   scheme {
        // scheme는 ulibclient에서 http/https/h2c를 구분하기 위한 용도로 사용
        sigtran = "http"
        diameter = "h2c"
   }
}

cert-store {
        cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
}

sms-client {
    connection {
        timeout = 20
        keep-alive = 30
        expire-time = 60
    }
    tls {
        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
        //cert-file = ${?USMSF_HOME}/config/server.crt
        //key-file = ${?USMSF_HOME}/config/server.key
        //peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
    }
    session-count = 8

    MaxHeaderListSize = 10000000
    StrictMaxConcurrentStreams = false
}

nrf-client {
        nrf.uri = "http://127.0.0.1:8080"
}


map-server {
    http {
        port = 8011
    }
    https {
        port = 8012
        max-handler = 0
        max-concurrent-streams = 6000
        max-readframesize = 10000000
        idle-timeout = 60
        maxuploadbuffer-per-connection = 70000000
        maxuploadbuffer-per-stram = 70000000
    }
    tls {
        cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt

        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
   }
}

nrfclient {
    nrf.uri = "http://127.0.0.1:8080"
}

redis {
    server.uri = "localhost:6379"
    connection-time-out = 3000 #3seconds
    write-time-out = 3000 #3seconds
    read-time-out = 5000 #5seconds, it should be longer than ping-period
    sender-queue-size = 300
    ping-period = 3000 #3seconds
    # interning-expired-period = 1000 #a second
    interning-expired-period = 3600000 #an hour
    reconnect-try-period = 3000 #3seconds
    cache-expiration = 10000 #10seconds
    subs-expiration = 60m #60 minutes
	pubsub.server.uri = "localhost:6379"
	channel = "smsf"
}

mariaDB {
        server.uri = "127.0.0.1:3306"
        driver = "mysql"
        dbname = "usmsf_db"
        user = "root"
        pwd = "root.123"
        SetMaxIdleConns = 50
        SetMaxOpenConns = 50
        SetConnMaxLifetime = 0
}


InstanceUCCMSDB {
        server.uri = "127.0.0.1:3306"
        driver = "mysql"
        dbname = "uccms"
        user = "root"
        pwd = "root.123"
        SetMaxIdleConns = 50
        SetMaxOpenConns = 50
        SetConnMaxLifetime = 0
}

scpcli {
    nf-instance-id : d1443c16-bf97-46c2-8633-d396161e911c
    nf-type : SMSF
    re-discover-interval : 30s
}

policy-based-selector {
        // nf type 입니다.
    nftype-dyn-UDM {
        // NRF Discovery 결과에 적용할 dataframe pipeline 입니다.
         dataframe-pipelines : [

            // nfStatus 로 필터링합니다.
            {
                action : filter
                expr : """record.nfStatus == "REGISTERED" """
            } ,
            // open 할 때 지정한 version 으로 필터링합니다.
            {
                action : filter
                expr : """ fn.checkRequiredVersion(record.nfServices , factor.versions)"""
            },
            // nfServices 배열을 record 로 변환합니다.
            {
                action : explode-array
                column : nfServices
            },
            // nfServiceStatus로 필터링합니다.
            {
                action : filter
                expr : """record.nfServices.nfServiceStatus == "REGISTERED" """
            } ,
            // nfServices와 udmInfo 아래에 있는 attribute 를 컬럼으로 꺼냅니다.
            {
                action : new-value
                new-value : {
                    priority : "record.nfServices.priority" ,
                    groupId : "record.udmInfo.groupId"
                }
            } ,
            // supi 의 mccmnc 를 이용해 해당하는 plmn의 nf 만 골라냅니다.
            {
                action : filter
                onlyWhen : """factor.supi != "" && !fn.isNil(record.plmnList)"""
                expr : "fn.isHomePlmn(factor.supi , record.plmnList)"

            } ,
            // routingIndicator 를 사용하여 필터링합니다.
             {
                action : filter
                onlyWhen : """factor.routingIndicator != "" && factor.routingIndicator != "0" && !fn.isNil(record.udmInfo.routingIndicators)"""
                expr : "!fn.isNil(fn.findOne(record.udmInfo.routingIndicators, ^(ri) => ri == factor.routingIndicator))"
                mark : {
                    "byRoutingIndicators" : true
                }
            } ,
            // supiRange 를 사용하여 필터링합니다.
            {
                action : filter
                onlyWhen : """factor.supi != "" && !fn.isNil(record.udmInfo.supiRanges)"""
                expr : "fn.checkIdentifyRange(factor.supi , record.udmInfo.supiRanges)"
            } ,
            // gpsiRange 를 사용하여 필터링합니다.
            {
                action : filter
                onlyWhen : """ factor.gpsi != "" && !fn.isNil(record.udmInfo.gpsiRanges)"""
                expr : "fn.checkIdentifyRange(factor.gpsi , record.udmInfo.gpsiRanges)"
            } ,
            // 살아 남은 NF를   정렬합니다.  routingIndicator에 의해 필터된것을 우선으로 하고,  그 다음으로는 priority 를 봅니다.
            {
                action : sort
                orders : [
                    {
                        column : byRoutingIndicators
                    },
                    {
                        column : priority ,
                        order : asc
                    }
                ]
            } ,
         ]
    }

    nftype-dyn-UDM-Params {
       dataframe-pipelines : [
         {
            action : new-value
            new-value : {
              "hello" : 10
            }
            change-value : {
                supi : """fn.replaceLastNChars(record.supi , 5 , "0")"""
            }
          }
       ]
    }
}

cert-store {
    pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
    pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
    peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
}

statistic {
    stattimer {
        timer = 10
    }

    registry = "default"
    items {
        call : TransactionTimer
        db : TransactionTimer
        n32i_http : TransactionTimer
        controller_get_context_info : TransactionTimer
        controller_exchange_capa : TransactionTimer
        controller_exchange_cipher_suite : TransactionTimer
        controller_exchange_protection_policy : TransactionTimer
        controller_terminte : TransactionTimer
        controller_error_report : TransactionTimer
        controller_error_report_self : TransactionTimer
        controller_child_actor : Gauge
    }
}

trace {
    http {
        onoff = true
        port = 8100
        connection {
                timeout = 20
                keep-alive = 20
                expire-time = 20
        }
    }

    default-service-name = "USMSF"
    config-path =  ${?USMSF_HOME}/resources/jaegertrace

    #trace-home = "/tmp/traces"
    trace-home = "./traces"

 trace-log-pattern= """
         {{- if eq .Logs.kind "request" -}}
            {{- if eq (index .Tags "span.kind") "server" -}}
                >>>>> Receive Request  : {{.ID}}
            {{- else -}}
                >>>>> Send Request     : {{.ID}}
            {{- end -}}
            {{- if eq .Tags.proto "http" }}
  URL : {{index .Tags "http.url"}}
  REQUEST : {{.Logs.request}}
            {{- end -}}
            {{- if eq .Tags.proto "sql" }}
  SQL : {{.Logs.sql}}
  Params : {{.Logs.params}}
            {{- end -}}
        {{- end -}}
        {{- if eq .Logs.kind "response" -}}
            {{- if eq (index .Tags "span.kind") "server" -}}
                <<<<< Send Response    : {{.ID}}
            {{- else -}}
                <<<<< Receive Response : {{.ID}}
            {{- end -}}
            {{- if eq .Tags.proto "http" }}
  URL : {{index .Tags "http.url"}}
  StatusCode : {{index .Logs "http.status_code"}}
  Response : {{.Logs.response}}
            {{- end -}}
            {{- if eq .Tags.proto "sql" }}
  RowsSelected : {{.Logs.rowsSelected}}
  RowsAffected : {{.Logs.rowsAffected}}
            {{- end -}}
            {{- if .Logs.error }}
  Error : {{.Logs.error}}
            {{- end -}}
        {{- end -}}
{{print "\n\n"}}"""
}


http-configmgr {
    http {
        port = 8090
    }

    scheme = "http"
    use = "svc"
    decisionPath = ${?UCCMS_DATA}/data/rselec/rselec_meta.json
    smsfPath = ${?UCCMS_DATA}/data/smsf/smsf_meta.json
    smscPath = ${?UCCMS_DATA}/data/smsc/smsc_meta.json

    udecisionPath = ${UCCMS_DATA}/data/rselec/rselec_config.json
    usmsfPath = ${UCCMS_DATA}/data/smsf/smsf_config.json
    usmscPath = ${UCCMS_DATA}/data/smsc/smsc_config.json

}

#metric {
#    default {
#        reporters = [
#            {
#                class : "logger",
#                logger : metric,
#                interval : 10s
#            }
#        ]
#    }
#}



nrf-local-config : {
    "045fcaf2-9969-4247-bf19-0c47716a71a9" : {
         token : "access_token_base64_encoded_string",
         ipv4Addresses: [
                "127.0.0.1:8081"
        ],
         nfServices : [{
             nfServiceStatus : REGISTERED
             priority : 4
             scheme : http
             serviceName : nudm-sdm
             ipEndPoints: {
                 ipv4Address: "127.0.0.1"
                 port: 8081
              },
             versions : [{
                 apiVersionInUri : v1
               },{
                 apiVersionInUri : v2
               }]
           },{
             nfServiceStatus : REGISTERED
             priority : 4
             scheme : http
             serviceName : nudm-uecm
             ipEndPoints: {
                 ipv4Address: "127.0.0.1"
                 port: 8081
              },
             versions : [{
                 apiVersionInUri : v1
               }]
         }]
         nfStatus : REGISTERED
         nfType : UDM
         udmInfo : {
           groupId : g1
           supiRanges : [{
               end : 769000000000000
               start : 450000000000000
             }]
         }
    } ,
 "1234-b32311-737c123-1876abcd7" : {
        token : "access_token_base64_encoded_string",
        ipv4Addresses: [
                "127.0.0.1:8085"
        ],
        nfServices : [{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : namf-comm
            ipEndPoints: {
                 ipv4Address: "127.0.0.1"
                 "port": 8085 //amf-port
            },
            versions : [{
                apiVersionInUri : v1
              }]
          },{
            nfServiceStatus : REGISTERED
            priority : 4
            scheme : http
            serviceName : namf-mt
             ipEndPoints: {
                 ipv4Address: "127.0.0.1"
                 port: 8085
            },
            versions : [{
                apiVersionInUri : v1
              }]
          }]
        nfStatus : REGISTERED
        nfType : AMF
    }
}

