modules = [
//	"UlibDefaults"
	"ulib.pprof"
	"scpcli.Defaults"
	"upolicy.Defaults"
	"scpcli.NRFLocalConfig"
	"scpcli.TokenLocalConfig"
	"ulib.FileTrace"
    NFServerModule

    // 기본적으로 ulib 과 echolib 의 Defaults 가 필요합니다.
    ulib.Defaults
    echolib.Defaults

    // StartAllServer 를 포함 시키면  , http-servers 에 리스트업된 모든 서버가 실행됩니다.
    echolib.StartAllServer

    // JwtKeyStore 는 아직 구현된게 없습니다.
    echolib.mockup.MockupJwtKeyStore


    UsmsfDefaults

]


// http 서버 설정입니다.
http-servers {

    // 내부 management 용으로 8080 서버를 실행합니다. tls 아닙니다.
    mgmt {
        port = 8001
        tls = false
        serve-for = internal
        services {
            // usmsf-v1 서비스를 활성화 시킵니다.
            usmsf-v1 {
                // 서비스의 prefix 는  /mgmt/bsf 입니다.
                prefix = ""

                // localhost 와 192.168.3.xxx  에서만 이 서비스를 사용할 수 있습니다.
                allowed-roles = [
                    "ip:localhost" ,
                    "ip:10.244.3.0",
                    "ip:192.168.7.0/24"
                   // "ip:10.244.3.0/24"
                ]
            }
        }
    }

    // 외부 NF 용으로 8443 서버를 실행합니다.  tls 입니다.
    smsf {
        port = 8002
        tls = true
        serve-for = NF

        services {
            // bsf-v1 서비스를 활성화 시킵니다.
            usmsf-v1 {
                // 규격대로 prefix 를 설정합니다.
                prefix = "/nbsf-management/v1"

                // b70cb766-8b50-4c35-948e-7f5369c4a38d 가 서명한 oauth 토큰이 있는 NF 만 허용합니다.
                allowed-roles = [
                    "iss:b70cb766-8b50-4c35-948e-7f5369c4a38d"
                ]
            }
        }
   }
}

logrus {
	format = "text"
	config-file = "/app/config/usmsf_logger.conf"
	watch-config = true
}

smsf {
	my-fqdn = "smsf.uangel.com"
	my-fqdn = ${?USMSF_FQDN}
    	my-nf-id = d1443c16-bf97-46c2-8633-d396161e911c
	mnc = "450"
	mcc = "06"
	my-map-id = "821099998888"
	my-diameter-name = "smsf"
	my-diameter-realm = "smsf.uangel.com"
	my-secret-key = "5g-smsf-uangel"
}

nf-server {
    http {
        port = 8001
    }
    https {
        port = 8002
	max-handler = 0
	max-concurrent-streams = 8000
	max-readframesize = 10000000
	idle-timeout = 90
	maxuploadbuffer-per-connection = 700000000
	maxuploadbuffer-per-stram = 700000000
	verbose-logs = false
    }
    tls {
	cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt

        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
   }

   scheme {
	// scheme는 ulibclient에서 http/https/h2c를 구분하기 위한 용도로 사용
	sigtran = "http"
	diameter = "http"
   }
}

sms-client {
    connection {
        timeout = 20
        keep-alive = 30
        expire-time = 60
    }
    tls {
    	pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
    	pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
    	peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
	//cert-file = ${?USMSF_HOME}/config/server.crt
        //key-file = ${?USMSF_HOME}/config/server.key
        //peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
    }
    session-count = 8
    MaxHeaderListSize = 10000000
    StrictMaxConcurrentStreams = false 
}

nrf-client {
	nrf.uri = "http://localhost:8080"
}


map-server {
    http {
        port = 8011
    }
    https {
        port = 8012
	max-handler = 0
	max-concurrent-streams = 6000
	max-readframesize = 10000000
	idle-timeout = 60
	maxuploadbuffer-per-connection = 70000000
	maxuploadbuffer-per-stram = 70000000
    }
    tls {
	cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt

        pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
        pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
   }
}

nrf-local-config : {
  "045fcaf2-9969-4247-bf19-0c47716a71a9" : {
    fqdn : "192.168.3.7:8081"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : nudm-sdm
        versions : [{
            apiVersionInUri : v1
          },{
            apiVersionInUri : v2
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : nudm-uecm
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : UDM
    udmInfo : {
      groupId : g1
      supiRanges : [{
          end : 460000000000000
          start : 450000000000000
        }]
    }
  } ,
  "045fcaf2-9969-4247-bf19-0c47716a71b9" : {
    fqdn : "192.168.3.5:8081"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : nudm-sdm
        versions : [{
            apiVersionInUri : v1
          },{
            apiVersionInUri : v2
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : nudm-uecm
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : UDM
    udmInfo : {
      groupId : g1
      supiRanges : [{
          end : 480000000000000
          start : 470000000000000
        }]
    }
  },
  "045fcaf2-9969-4247-bf19-1c47716a71b9" : {
    fqdn : "172.16.10.38:8081"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : nudm-sdm
        versions : [{
            apiVersionInUri : v1
          },{
            apiVersionInUri : v2
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : nudm-uecm
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : UDM
    udmInfo : {
      groupId : g1
      supiRanges : [{
          end : 500000000000000
          start : 490000000000000
        }]
    }
  } ,
  "045fcaf2-9969-4247-bf19-1c47716a71ba" : {
//    fqdn : "udm.uangel.com:8081"
    fqdn : "udm.uangel.com:9091"
//    fqdn : "usmsf-udm-sim.usmsf.svc.cluster.local:9091"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : https
        serviceName : nudm-sdm
        versions : [{
            apiVersionInUri : v1
          },{
            apiVersionInUri : v2
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : https
        serviceName : nudm-uecm
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : UDM
    udmInfo : {
      groupId : g1
      supiRanges : [{
          end : 440000000000000
          start : 400000000000000
        }]
    }
  } ,
  "045fcaf2-9969-4247-bf19-1c47716a71cc" : {
    fqdn : "usmsf-udm-sim.usmsf.svc.cluster.local:9091"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : https
        serviceName : nudm-sdm
        versions : [{
            apiVersionInUri : v1
          },{
            apiVersionInUri : v2
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : https
        serviceName : nudm-uecm
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : UDM
    udmInfo : {
      groupId : g1
      supiRanges : [{
          end : 600000000000000
          start : 500000000000000
        }]
    }
  } ,

  "1234-b32311-737c123-1876abcd7" : {
//    fqdn : "amf.uangel.com:8085"
//    fqdn : "amf.uangel.com:9095"
    fqdn : "usmsf-amf-sim.usmsf.svc.cluster.local:9095"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : https
        serviceName : namf-comm
        versions : [{
            apiVersionInUri : v1
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : https
        serviceName : namf-mt
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : AMF
  },
  "1234-b32311-737c123-1876abcb7" : {
    fqdn : "192.168.3.5:8085"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : namf-comm
        versions : [{
            apiVersionInUri : v1
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : namf-mt
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : AMF
  },
  "1234-b32311-737c123-2876abcb7" : {
    fqdn : "172.16.10.38:8085"

    token : "access_token_base64_encoded_string" 
    nfServices : [{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : namf-comm
        versions : [{
            apiVersionInUri : v1
          }]
      },{
        nfServiceStatus : REGISTERED
        priority : 4
        scheme : http
        serviceName : namf-mt
        versions : [{
            apiVersionInUri : v1
          }]
      }]
    nfStatus : REGISTERED
    nfType : AMF
  }
}

nrfclient {
    nrf.uri = "http://localhost:8080"
}

redis {
    server.uri = "localhost:6379"
    connection-time-out = 3000 #3seconds
    write-time-out = 3000 #3seconds
    read-time-out = 5000 #5seconds, it should be longer than ping-period
    sender-queue-size = 300
    ping-period = 3000 #3seconds
    # interning-expired-period = 1000 #a second
    interning-expired-period = 3600000 #an hour
    reconnect-try-period = 3000 #3seconds
    cache-expiration = 10000 #10seconds
    subs-expiration = 60m #60 minutes
}

mariaDB {
	server.uri = "127.0.0.1:3306"
	driver = "mysql"
	dbname = "usmsf_db"
	user = "root"
	pwd = "root.123"
        SetMaxIdleConns = 50
        SetMaxOpenConns = 50
	SetConnMaxLifetime = 0
}

scpcli {
    nf-instance-id : d1443c16-bf97-46c2-8633-d396161e911c
    nf-type : SMSF
    re-discover-interval : 1s
}

policy-based-selector {
        // nf type 입니다.
    nftype-dyn-UDM {
        // NRF Discovery 결과에 적용할 dataframe pipeline 입니다.
         dataframe-pipelines : [
            
            // nfStatus 로 필터링합니다.
            {
                action : filter
                expr : """record.nfStatus == "REGISTERED" """
            } ,
            // open 할 때 지정한 version 으로 필터링합니다.
            {
                action : filter
                expr : """ fn.checkRequiredVersion(record.nfServices , factor.versions)"""
            }, 
            // nfServices 배열을 record 로 변환합니다.
            {
                action : explode-array
                column : nfServices
            },
            // nfServiceStatus로 필터링합니다.
            {
                action : filter
                expr : """record.nfServices.nfServiceStatus == "REGISTERED" """
            } ,
            // nfServices와 udmInfo 아래에 있는 attribute 를 컬럼으로 꺼냅니다.
            {
                action : new-value
                new-value : {
                    priority : "record.nfServices.priority" ,
                    groupId : "record.udmInfo.groupId"
                }
            } ,
            // supi 의 mccmnc 를 이용해 해당하는 plmn의 nf 만 골라냅니다.
            {
                action : filter
                onlyWhen : """factor.supi != "" && !fn.isNil(record.plmnList)"""
                expr : "fn.isHomePlmn(factor.supi , record.plmnList)"
                
            } ,
            // routingIndicator 를 사용하여 필터링합니다.
             {
                action : filter
                onlyWhen : """factor.routingIndicator != "" && factor.routingIndicator != "0" && !fn.isNil(record.udmInfo.routingIndicators)"""
                expr : "!fn.isNil(fn.findOne(record.udmInfo.routingIndicators, ^(ri) => ri == factor.routingIndicator))"
                mark : {
                    "byRoutingIndicators" : true
                }
            } ,
            // supiRange 를 사용하여 필터링합니다.
            {
                action : filter
                onlyWhen : """factor.supi != "" && !fn.isNil(record.udmInfo.supiRanges)"""
                expr : "fn.checkIdentifyRange(factor.supi , record.udmInfo.supiRanges)"
            } ,
            // gpsiRange 를 사용하여 필터링합니다.
            {
                action : filter
                onlyWhen : """ factor.gpsi != "" && !fn.isNil(record.udmInfo.gpsiRanges)"""
                expr : "fn.checkIdentifyRange(factor.gpsi , record.udmInfo.gpsiRanges)"
            } ,
            // 살아 남은 NF를   정렬합니다.  routingIndicator에 의해 필터된것을 우선으로 하고,  그 다음으로는 priority 를 봅니다.
            {
                action : sort
                orders : [
                    {
                        column : byRoutingIndicators
                    },
                    {
                        column : priority ,
                        order : asc
                    }
                ]
            } ,
         ]
    }
    nftype-dyn-UDM-Params {
       dataframe-pipelines : [
         {
            action : new-value
            new-value : {
              "hello" : 10
            }
            change-value : {
                supi : """fn.replaceLastNChars(record.supi , 5 , "0")"""
            }
          }
       ]
    }
}

cert-store {
    pkcs-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12
    pkcs-key-file = ${?USMSF_HOME}/config/smsf.uangel.com.p12.key
    peer-certs-file = ${?USMSF_HOME}/config/rootca.crt
}

statistic {
    stattimer {
	timer = 10 	
    }
	
    registry = "default"
    items {
        call : TransactionTimer
        db : TransactionTimer
        n32i_http : TransactionTimer
        controller_get_context_info : TransactionTimer
        controller_exchange_capa : TransactionTimer
        controller_exchange_cipher_suite : TransactionTimer
        controller_exchange_protection_policy : TransactionTimer
        controller_terminte : TransactionTimer
        controller_error_report : TransactionTimer
        controller_error_report_self : TransactionTimer
        controller_child_actor : Gauge
    }
}

trace {
    default-service-name = "USMSF"
    config-path =  ${?USMSF_HOME}/config/jaegertrace
}

trace {
    http {
        port = 8100
        connection {
                timeout = 20
                keep-alive = 20
                expire-time = 20
        }
	onoff=false
    }

    default-service-name = "USMSF"
    config-path =  ${?USMSF_HOME}/resources/jaegertrace

    trace-home = "/tmp/traces"

 trace-log-pattern= """
             {{- if .Logs.request -}}
                 >>>>> {{.ID}}
   URL : {{index .Tags "http.url"}}
   Header : {{.Logs.header}}
   REQUEST : {{.Logs.request}}
             {{- end -}}
             {{- if index .Logs "http.status_code" -}}
                 <<<<< {{.ID}}
   URL : {{index .Tags "http.url"}}
   StatusCode : {{index .Logs "http.status_code"}}
   Header : {{.Logs.header}}
   Response : {{.Logs.response}}
             {{- end -}}
 {{print "\n\n"}}"""
}


http-configmgr {
    http {
        port = 8090
    }

    https {
        port = 9100
    }
    tls {

	cert-file = ${?USMSF_HOME}/config/server.crt
        key-file = ${?USMSF_HOME}/config/server.key
        peer-certs-file = ${?USMSF_HOME}/config/rootca.crt

//        pkcs-file = ${?USMSF_HOME}/config/server.p12
//        pkcs-key-file = ${?USMSF_HOME}/config/server.p12.key 
    }
    use = svc
}

metric {
    default {
        reporters = [
            {
                class : "logger",
                logger : metric,
                interval : 10s
            }
        ]
    }
}
